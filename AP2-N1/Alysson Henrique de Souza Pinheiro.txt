##<<1>>## Para manter os sistema atualizado e funcional é necessário inicialmente montar periodicamente uma matriz de correlação para que os atributos com melhores valores sejam escolhidos para serem usados nos conjuntos de treino e validação, em seguida deve ser realiza da uma limpeza nos dados ruidosos, tomando o exemplo da idade, utilizando uma estrategia de bucketing é possível remover os ruídos desse atributo, por fim pode ser aplicado um algoritmo preditivo baseado em K-NN para prever baseado nos atributos de um cliente quais produtos devem ser recomendados
##<<2a>>##  Para utilizar K-NN para prever quais produtos um cliente compraria primeiramente é necessário selecionar quais dos atributos presentes no dataset vão ser utilizados no processo de treinamento e validação, utilizando uma matriz de correlação podemos selecionar somente atributos relevantes com valores acima de 0, tomando cuidado para não inserir possíveis correlações espúrias, em seguida utilizando um método de amostragem progressiva, o modelo é treinado até conseguir prever com uma taxa de acerto acima de 90% os produtos que um cliente compraria, por fim para a equipe de backend será entregue a classe ModeloPred essa classe possui o método setClienteAlvo, que recebe os dados do cliente a ser realizada a previsão e o método preverComprasCliente que realiza a comparação com os dados do clienteAlvo e prevê quais os produtos o cliente compraria
##<<2b>>##  Para utilizar um algoritmo Case-Based-Reasoning para prever quais produtos um cliente compraria no webiste o banco de dados deve ser construído pra incluir as ações que um usuário toma dentro da loja, depois de montado o banco de dados fazermos uma limpeza nos dados para remover dados ruidosos e uma normalização nos dados, a partir disso é possível definir perfis de usuário e treinar o modelo para que seja simuladas as decisões que um usuário tomaria até comprar um produto
